module wbg(r,b,s
    );
input [3:0] r,b;
output s;
wire w1,w2,w3,w0,z3,z2,z1,z0;


assign w3=r[3];
assign w2=(~r[3])&r[2];
assign w1=(~r[3])&(~r[2])&r[1];
assign w0=(~r[3])&(~r[2])&(~r[1])&r[0];

assign z3=w3&b[3];
assign z2=w2&b[2];
assign z1=w1&b[1];
assign z0=w0&b[0];

assign s=z3||z2||z1||z0;
endmodule

module NLFSR(clk,ld,d_in,clr,q
    );
input clk ,clr,ld;
input [3:0] d_in;
output reg [3:0] q;
wire si;
assign si=q[1]^q[0];
always @(posedge clk ,posedge ld,posedge clr)
if(clr)
q<=0;
else if(ld)
q<=d_in;
else

begin

q[2:0]<=q[3:1];
q[3]<=si;
end
endmodule

module shift_registor_16_bit(clk,clr,si,q
    );
input clk,clr,si;
output reg [15:0] q;
always@(posedge clk,posedge clr)
if(clr) 
q<=0;
else 
begin 
q[14:0]<=q[15:1];
q[15]<=si;
end
endmodule






module mod_16_counter(clk,clr,count
    );
input clk,clr;
output reg [3:0] count;
always@(posedge clk,posedge clr)
if(clr)
count<=0;
else
count<=count +1 ;

endmodule


module sng(clk,clr,ld,b,seed,sn,done,
    w);
input clk,clr,ld;
input [3:0] seed,b;
output [15:0] sn;
wire s;
wire [3:0] count;
output reg done;
output [3:0] w;

NLFSR a(clk,ld,seed,clr,w);

wbg a2(w,b,s);

shift_registor_16_bit a3(clk,clr,s,sn);

mod_16_counter a4(clk,clr,count);


always@(posedge clk)
if(count==14)
done<=1;
else
done<=0;




endmodule